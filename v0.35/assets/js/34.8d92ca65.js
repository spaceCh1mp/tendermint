(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{529:function(e,t,a){e.exports=a.p+"assets/img/pbts-message.9ddf0279.png"},653:function(e,t,a){"use strict";a.r(t);var o=a(1),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"adr-71-proposer-based-timestamps"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#adr-71-proposer-based-timestamps"}},[e._v("#")]),e._v(" ADR 71: Proposer-Based Timestamps")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#changelog"}},[e._v("Changelog")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#status"}},[e._v("Status")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#context"}},[e._v("Context")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#alternative-approaches"}},[e._v("Alternative Approaches")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#remove-timestamps-altogether"}},[e._v("Remove timestamps altogether")])])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#decision"}},[e._v("Decision")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#detailed-design"}},[e._v("Detailed Design")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#overview"}},[e._v("Overview")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#proposal-timestamp-and-block-timestamp"}},[e._v("Proposal Timestamp and Block Timestamp")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#saving-the-timestamp-across-heights"}},[e._v("Saving the timestamp across heights")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-commitsig"}},[e._v("Changes to "),o("code",[e._v("CommitSig")])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-commit"}},[e._v("Changes to "),o("code",[e._v("Commit")])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-vote-messages"}},[e._v("Changes to "),o("code",[e._v("Vote")]),e._v(" messages")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#new-consensus-parameters"}},[e._v("New consensus parameters")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-header"}},[e._v("Changes to "),o("code",[e._v("Header")])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-the-block-proposal-step"}},[e._v("Changes to the block proposal step")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#proposer-selects-proposal-timestamp"}},[e._v("Proposer selects proposal timestamp")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#proposer-selects-block-timestamp"}},[e._v("Proposer selects block timestamp")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#proposer-waits"}},[e._v("Proposer waits")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-the-propose-step-timeout"}},[e._v("Changes to the propose step timeout")])])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-validation-rules"}},[e._v("Changes to validation rules")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#proposal-timestamp-validation"}},[e._v("Proposal timestamp validation")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#block-timestamp-validation"}},[e._v("Block timestamp validation")])])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-the-prevote-step"}},[e._v("Changes to the prevote step")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-the-precommit-step"}},[e._v("Changes to the precommit step")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#changes-to-locking-a-block"}},[e._v("Changes to locking a block")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#remove-votetime-completely"}},[e._v("Remove voteTime Completely")])])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#future-improvements"}},[e._v("Future Improvements")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#consequences"}},[e._v("Consequences")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"#positive"}},[e._v("Positive")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#neutral"}},[e._v("Neutral")])]),e._v(" "),o("li",[o("a",{attrs:{href:"#negative"}},[e._v("Negative")])])])]),e._v(" "),o("li",[o("a",{attrs:{href:"#references"}},[e._v("References")])])]),e._v(" "),o("h2",{attrs:{id:"changelog"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changelog"}},[e._v("#")]),e._v(" Changelog")]),e._v(" "),o("ul",[o("li",[e._v("July 15 2021: Created by @williambanfield")]),e._v(" "),o("li",[e._v("Aug 4 2021: Draft completed by @williambanfield")]),e._v(" "),o("li",[e._v("Aug 5 2021: Draft updated to include data structure changes by @williambanfield")]),e._v(" "),o("li",[e._v("Aug 20 2021: Language edits completed by @williambanfield")])]),e._v(" "),o("h2",{attrs:{id:"status"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[e._v("#")]),e._v(" Status")]),e._v(" "),o("p",[o("strong",[e._v("Accepted")])]),e._v(" "),o("h2",{attrs:{id:"context"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" Context")]),e._v(" "),o("p",[e._v("Tendermint currently provides a monotonically increasing source of time known as "),o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/consensus/bft-time.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("BFTTime"),o("OutboundLink")],1),e._v(".\nThis mechanism for producing a source of time is reasonably simple.\nEach correct validator adds a timestamp to each "),o("code",[e._v("Precommit")]),e._v(" message it sends.\nThe timestamp it sends is either the validator's current known Unix time or one millisecond greater than the previous block time, depending on which value is greater.\nWhen a block is produced, the proposer chooses the block timestamp as the weighted median of the times in all of the "),o("code",[e._v("Precommit")]),e._v(" messages the proposer received.\nThe weighting is proportional to the amount of voting power, or stake, a validator has on the network.\nThis mechanism for producing timestamps is both deterministic and byzantine fault tolerant.")]),e._v(" "),o("p",[e._v("This current mechanism for producing timestamps has a few drawbacks.\nValidators do not have to agree at all on how close the selected block timestamp is to their own currently known Unix time.\nAdditionally, any amount of voting power "),o("code",[e._v(">1/3")]),e._v(" may directly control the block timestamp.\nAs a result, it is quite possible that the timestamp is not particularly meaningful.")]),e._v(" "),o("p",[e._v("These drawbacks present issues in the Tendermint protocol.\nTimestamps are used by light clients to verify blocks.\nLight clients rely on correspondence between their own currently known Unix time and the block timestamp to verify blocks they see;\nHowever, their currently known Unix time may be greatly divergent from the block timestamp as a result of the limitations of "),o("code",[e._v("BFTTime")]),e._v(".")]),e._v(" "),o("p",[e._v("The proposer-based timestamps specification suggests an alternative approach for producing block timestamps that remedies these issues.\nProposer-based timestamps alter the current mechanism for producing block timestamps in two main ways:")]),e._v(" "),o("ol",[o("li",[e._v("The block proposer is amended to offer up its currently known Unix time as the timestamp for the next block.")]),e._v(" "),o("li",[e._v("Correct validators only approve the proposed block timestamp if it is close enough to their own currently known Unix time.")])]),e._v(" "),o("p",[e._v("The result of these changes is a more meaningful timestamp that cannot be controlled by "),o("code",[e._v("<= 2/3")]),e._v(" of the validator voting power.\nThis document outlines the necessary code changes in Tendermint to implement the corresponding "),o("a",{attrs:{href:"https://github.com/tendermint/spec/tree/master/spec/consensus/proposer-based-timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("proposer-based timestamps specification"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"alternative-approaches"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#alternative-approaches"}},[e._v("#")]),e._v(" Alternative Approaches")]),e._v(" "),o("h3",{attrs:{id:"remove-timestamps-altogether"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#remove-timestamps-altogether"}},[e._v("#")]),e._v(" Remove timestamps altogether")]),e._v(" "),o("p",[e._v("Computer clocks are bound to skew for a variety of reasons.\nUsing timestamps in our protocol means either accepting the timestamps as not reliable or impacting the protocol’s liveness guarantees.\nThis design requires impacting the protocol’s liveness in order to make the timestamps more reliable.\nAn alternate approach is to remove timestamps altogether from the block protocol.\n"),o("code",[e._v("BFTTime")]),e._v(" is deterministic but may be arbitrarily inaccurate.\nHowever, having a reliable source of time is quite useful for applications and protocols built on top of a blockchain.")]),e._v(" "),o("p",[e._v("We therefore decided not to remove the timestamp.\nApplications often wish for some transactions to occur on a certain day, on a regular period, or after some time following a different event.\nAll of these require some meaningful representation of agreed upon time.\nThe following protocols and application features require a reliable source of time:")]),e._v(" "),o("ul",[o("li",[e._v("Tendermint Light Clients "),o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/light-client/verification/README.md#definitions-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("rely on correspondence between their known time"),o("OutboundLink")],1),e._v(" and the block time for block verification.")]),e._v(" "),o("li",[e._v("Tendermint Evidence validity is determined "),o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/8029cf7a0fcc89a5004e173ec065aa48ad5ba3c8/spec/consensus/evidence.md#verification",target:"_blank",rel:"noopener noreferrer"}},[e._v("either in terms of heights or in terms of time"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[e._v("Unbonding of staked assets in the Cosmos Hub "),o("a",{attrs:{href:"https://github.com/cosmos/governance/blob/ce75de4019b0129f6efcbb0e752cd2cc9e6136d3/params-change/Staking.md#unbondingtime",target:"_blank",rel:"noopener noreferrer"}},[e._v("occurs after a period of 21 days"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("li",[e._v("IBC packets can use either a "),o("a",{attrs:{href:"https://docs.cosmos.network/v0.43/ibc/overview.html#acknowledgements",target:"_blank",rel:"noopener noreferrer"}},[e._v("timestamp or a height to timeout packet delivery"),o("OutboundLink")],1),e._v(".")])]),e._v(" "),o("p",[e._v("Finally, inflation distribution in the Cosmos Hub uses an approximation of time to calculate an annual percentage rate.\nThis approximation of time is calculated using "),o("a",{attrs:{href:"https://github.com/cosmos/governance/blob/master/params-change/Mint.md#blocksperyear",target:"_blank",rel:"noopener noreferrer"}},[e._v("block heights with an estimated number of blocks produced in a year"),o("OutboundLink")],1),e._v(".\nProposer-based timestamps will allow this inflation calculation to use a more meaningful and accurate source of time.")]),e._v(" "),o("h2",{attrs:{id:"decision"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#decision"}},[e._v("#")]),e._v(" Decision")]),e._v(" "),o("p",[e._v("Implement proposer-based timestamps and remove "),o("code",[e._v("BFTTime")]),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"detailed-design"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#detailed-design"}},[e._v("#")]),e._v(" Detailed Design")]),e._v(" "),o("h3",{attrs:{id:"overview"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),o("p",[e._v("Implementing proposer-based timestamps will require a few changes to Tendermint’s code.\nThese changes will be to the following components:")]),e._v(" "),o("ul",[o("li",[e._v("The "),o("code",[e._v("internal/consensus/")]),e._v(" package.")]),e._v(" "),o("li",[e._v("The "),o("code",[e._v("state/")]),e._v(" package.")]),e._v(" "),o("li",[e._v("The "),o("code",[e._v("Vote")]),e._v(", "),o("code",[e._v("CommitSig")]),e._v(", "),o("code",[e._v("Commit")]),e._v(" and "),o("code",[e._v("Header")]),e._v(" types.")]),e._v(" "),o("li",[e._v("The consensus parameters.")])]),e._v(" "),o("h3",{attrs:{id:"proposal-timestamp-and-block-timestamp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proposal-timestamp-and-block-timestamp"}},[e._v("#")]),e._v(" Proposal Timestamp and Block Timestamp")]),e._v(" "),o("p",[e._v("This design discusses two timestamps: (1) The timestamp in the block and (2) the timestamp in the proposal message.\nThe existence and use of both of these timestamps can get a bit confusing, so some background is given here to clarify their uses.")]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e5312942e30331e7c42b75426da2c6c9c00ae476/types/proposal.go#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("proposal message currently has a timestamp"),o("OutboundLink")],1),e._v(".\nThis timestamp is the current Unix time known to the proposer when sending the "),o("code",[e._v("Proposal")]),e._v(" message.\nThis timestamp is not currently used as part of consensus.\nThe changes in this ADR will begin using the proposal message timestamp as part of consensus.\nWe will refer to this as the "),o("strong",[e._v("proposal timestamp")]),e._v(" throughout this design.")]),e._v(" "),o("p",[e._v("The block has a timestamp field "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/dc7c212c41a360bfe6eb38a6dd8c709bbc39aae7/types/block.go#L338",target:"_blank",rel:"noopener noreferrer"}},[e._v("in the header"),o("OutboundLink")],1),e._v(".\nThis timestamp is set currently as part of Tendermint’s "),o("code",[e._v("BFTtime")]),e._v(" algorithm.\nIt is set when a block is proposed and it is checked by the validators when they are deciding to prevote the block.\nThis field will continue to be used but the logic for creating and validating this timestamp will change.\nWe will refer to this as the "),o("strong",[e._v("block timestamp")]),e._v(" throughout this design.")]),e._v(" "),o("p",[e._v("At a high level, the proposal timestamp from height "),o("code",[e._v("H")]),e._v(" is used as the block timestamp at height "),o("code",[e._v("H+1")]),e._v(".\nThe following image shows this relationship.\nThe rest of this document describes the code changes that will make this possible.")]),e._v(" "),o("p",[o("img",{attrs:{src:a(529),alt:""}})]),e._v(" "),o("h3",{attrs:{id:"saving-the-timestamp-across-heights"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#saving-the-timestamp-across-heights"}},[e._v("#")]),e._v(" Saving the timestamp across heights")]),e._v(" "),o("p",[e._v("Currently, "),o("code",[e._v("BFTtime")]),e._v(" uses "),o("code",[e._v("LastCommit")]),e._v(" to construct the block timestamp.\nThe "),o("code",[e._v("LastCommit")]),e._v(" is created at height "),o("code",[e._v("H-1")]),e._v(" and is saved in the state store to be included in the block at height "),o("code",[e._v("H")]),e._v(".\n"),o("code",[e._v("BFTtime")]),e._v(" takes the weighted median of the timestamps in "),o("code",[e._v("LastCommit.CommitSig")]),e._v(" to build the timestamp for height "),o("code",[e._v("H")]),e._v(".")]),e._v(" "),o("p",[e._v("For proposer-based timestamps, the "),o("code",[e._v("LastCommit.CommitSig")]),e._v(" timestamps will no longer be used to build the timestamps for height "),o("code",[e._v("H")]),e._v(".\nInstead, the proposal timestamp from height "),o("code",[e._v("H-1")]),e._v(" will become the block timestamp for height "),o("code",[e._v("H")]),e._v(".\nTo enable this, we will add a "),o("code",[e._v("Timestamp")]),e._v(" field to the "),o("code",[e._v("Commit")]),e._v(" struct.\nThis field will be populated at each height with the proposal timestamp decided on at the previous height.\nThis timestamp will also be saved with the rest of the commit in the state store "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/internal/consensus/state.go#L1611",target:"_blank",rel:"noopener noreferrer"}},[e._v("when the commit is finalized"),o("OutboundLink")],1),e._v(" so that it can be recovered if Tendermint crashes.\nChanges to the "),o("code",[e._v("CommitSig")]),e._v(" and "),o("code",[e._v("Commit")]),e._v(" struct are detailed below.")]),e._v(" "),o("h3",{attrs:{id:"changes-to-commitsig"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-commitsig"}},[e._v("#")]),e._v(" Changes to "),o("code",[e._v("CommitSig")])]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/a419f4df76fe4aed668a6c74696deabb9fe73211/types/block.go#L604",target:"_blank",rel:"noopener noreferrer"}},[e._v("CommitSig"),o("OutboundLink")],1),e._v(" struct currently contains a timestamp.\nThis timestamp is the current Unix time known to the validator when it issued a "),o("code",[e._v("Precommit")]),e._v(" for the block.\nThis timestamp is no longer used and will be removed in this change.")]),e._v(" "),o("p",[o("code",[e._v("CommitSig")]),e._v(" will be updated as follows:")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"dHlwZSBDb21taXRTaWcgc3RydWN0IHsKCUJsb2NrSURGbGFnICAgICAgQmxvY2tJREZsYWcgYGpzb246JnF1b3Q7YmxvY2tfaWRfZmxhZyZxdW90O2AKCVZhbGlkYXRvckFkZHJlc3MgQWRkcmVzcyAgICAgYGpzb246JnF1b3Q7dmFsaWRhdG9yX2FkZHJlc3MmcXVvdDtgCi0tCVRpbWVzdGFtcCAgICAgICAgdGltZS5UaW1lICAgYGpzb246JnF1b3Q7dGltZXN0YW1wJnF1b3Q7YAoJU2lnbmF0dXJlICAgICAgICBbXWJ5dGUgICAgICBganNvbjomcXVvdDtzaWduYXR1cmUmcXVvdDtgCn0K"}}),e._v(" "),o("h3",{attrs:{id:"changes-to-commit"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-commit"}},[e._v("#")]),e._v(" Changes to "),o("code",[e._v("Commit")])]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/a419f4df76fe4aed668a6c74696deabb9fe73211/types/block.go#L746",target:"_blank",rel:"noopener noreferrer"}},[e._v("Commit"),o("OutboundLink")],1),e._v(" struct does not currently contain a timestamp.\nThe timestamps in the "),o("code",[e._v("Commit.CommitSig")]),e._v(" entries are currently used to build the block timestamp.\nWith these timestamps removed, the commit time will instead be stored in the "),o("code",[e._v("Commit")]),e._v(" struct.")]),e._v(" "),o("p",[o("code",[e._v("Commit")]),e._v(" will be updated as follows.")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"dHlwZSBDb21taXQgc3RydWN0IHsKCUhlaWdodCAgICAgaW50NjQgICAgICAgYGpzb246JnF1b3Q7aGVpZ2h0JnF1b3Q7YAoJUm91bmQgICAgICBpbnQzMiAgICAgICBganNvbjomcXVvdDtyb3VuZCZxdW90O2AKKysJVGltZXN0YW1wICB0aW1lLlRpbWUgIGBqc29uOiZxdW90O3RpbWVzdGFtcCZxdW90O2AgCglCbG9ja0lEICAgIEJsb2NrSUQgICAgIGBqc29uOiZxdW90O2Jsb2NrX2lkJnF1b3Q7YAoJU2lnbmF0dXJlcyBbXUNvbW1pdFNpZyBganNvbjomcXVvdDtzaWduYXR1cmVzJnF1b3Q7YAp9Cg=="}}),e._v(" "),o("h3",{attrs:{id:"changes-to-vote-messages"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-vote-messages"}},[e._v("#")]),e._v(" Changes to "),o("code",[e._v("Vote")]),e._v(" messages")]),e._v(" "),o("p",[o("code",[e._v("Precommit")]),e._v(" and "),o("code",[e._v("Prevote")]),e._v(" messages use a common "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/a419f4df76fe4aed668a6c74696deabb9fe73211/types/vote.go#L50",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vote struct"),o("OutboundLink")],1),e._v(".\nThis struct currently contains a timestamp.\nThis timestamp is set using the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/internal/consensus/state.go#L2241",target:"_blank",rel:"noopener noreferrer"}},[e._v("voteTime"),o("OutboundLink")],1),e._v(" function and therefore vote times correspond to the current Unix time known to the validator.\nFor precommits, this timestamp is used to construct the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/types/block.go#L754",target:"_blank",rel:"noopener noreferrer"}},[e._v("CommitSig that is included in the block in the LastCommit"),o("OutboundLink")],1),e._v(" field.\nFor prevotes, this field is unused.\nProposer-based timestamps will use the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/c3ae6f5b58e07b29c62bfdc5715b6bf8ae5ee951/internal/consensus/types/round_state.go#L76",target:"_blank",rel:"noopener noreferrer"}},[e._v("RoundState.Proposal"),o("OutboundLink")],1),e._v(" timestamp to construct the "),o("code",[e._v("signedBytes")]),e._v(" "),o("code",[e._v("CommitSig")]),e._v(".\nThis timestamp is therefore no longer useful and will be dropped.")]),e._v(" "),o("p",[o("code",[e._v("Vote")]),e._v(" will be updated as follows:")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"dHlwZSBWb3RlIHN0cnVjdCB7CglUeXBlICAgICAgICAgICAgIHRtcHJvdG8uU2lnbmVkTXNnVHlwZSBganNvbjomcXVvdDt0eXBlJnF1b3Q7YAoJSGVpZ2h0ICAgICAgICAgICBpbnQ2NCAgICAgICAgICAgICAgICAgYGpzb246JnF1b3Q7aGVpZ2h0JnF1b3Q7YAoJUm91bmQgICAgICAgICAgICBpbnQzMiAgICAgICAgICAgICAgICAgYGpzb246JnF1b3Q7cm91bmQmcXVvdDtgICAgIAoJQmxvY2tJRCAgICAgICAgICBCbG9ja0lEICAgICAgICAgICAgICAgYGpzb246JnF1b3Q7YmxvY2tfaWQmcXVvdDtgIC8vIHplcm8gaWYgdm90ZSBpcyBuaWwuCi0tCVRpbWVzdGFtcCAgICAgICAgdGltZS5UaW1lICAgICAgICAgICAgIGBqc29uOiZxdW90O3RpbWVzdGFtcCZxdW90O2AKCVZhbGlkYXRvckFkZHJlc3MgQWRkcmVzcyAgICAgICAgICAgICAgIGBqc29uOiZxdW90O3ZhbGlkYXRvcl9hZGRyZXNzJnF1b3Q7YAoJVmFsaWRhdG9ySW5kZXggICBpbnQzMiAgICAgICAgICAgICAgICAgYGpzb246JnF1b3Q7dmFsaWRhdG9yX2luZGV4JnF1b3Q7YAoJU2lnbmF0dXJlICAgICAgICBbXWJ5dGUgICAgICAgICAgICAgICAgYGpzb246JnF1b3Q7c2lnbmF0dXJlJnF1b3Q7YAp9Cg=="}}),e._v(" "),o("h3",{attrs:{id:"new-consensus-parameters"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#new-consensus-parameters"}},[e._v("#")]),e._v(" New consensus parameters")]),e._v(" "),o("p",[e._v("The proposer-based timestamp specification includes multiple new parameters that must be the same among all validators.\nThese parameters are "),o("code",[e._v("PRECISION")]),e._v(", "),o("code",[e._v("MSGDELAY")]),e._v(", and "),o("code",[e._v("ACCURACY")]),e._v(".")]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("PRECISION")]),e._v(" and "),o("code",[e._v("MSGDELAY")]),e._v(" parameters are used to determine if the proposed timestamp is acceptable.\nA validator will only Prevote a proposal if the proposal timestamp is considered "),o("code",[e._v("timely")]),e._v(".\nA proposal timestamp is considered "),o("code",[e._v("timely")]),e._v(" if it is within "),o("code",[e._v("PRECISION")]),e._v(" and "),o("code",[e._v("MSGDELAY")]),e._v(" of the Unix time known to the validator.\nMore specifically, a proposal timestamp is "),o("code",[e._v("timely")]),e._v(" if "),o("code",[e._v("validatorLocalTime - PRECISION < proposalTime < validatorLocalTime + PRECISION + MSGDELAY")]),e._v(".")]),e._v(" "),o("p",[e._v("Because the "),o("code",[e._v("PRECISION")]),e._v(" and "),o("code",[e._v("MSGDELAY")]),e._v(" parameters must be the same across all validators, they will be added to the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/master/proto/tendermint/types/params.proto#L13",target:"_blank",rel:"noopener noreferrer"}},[e._v("consensus parameters"),o("OutboundLink")],1),e._v(" as "),o("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration",target:"_blank",rel:"noopener noreferrer"}},[e._v("durations"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("The proposer-based timestamp specification also includes a "),o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/pbts-sysmodel_001_draft.md#pbts-clocksync-external0",target:"_blank",rel:"noopener noreferrer"}},[e._v("new ACCURACY parameter"),o("OutboundLink")],1),e._v(".\nIntuitively, "),o("code",[e._v("ACCURACY")]),e._v(" represents the difference between the ‘real’ time and the currently known time of correct validators.\nThe currently known Unix time of any validator is always somewhat different from real time.\n"),o("code",[e._v("ACCURACY")]),e._v(" is the largest such difference between each validator's time and real time taken as an absolute value.\nThis is not something a computer can determine on its own and must be specified as an estimate by community running a Tendermint-based chain.\nIt is used in the new algorithm to "),o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/pbts-algorithm_001_draft.md#pbts-alg-startround0",target:"_blank",rel:"noopener noreferrer"}},[e._v("calculate a timeout for the propose step"),o("OutboundLink")],1),e._v(".\n"),o("code",[e._v("ACCURACY")]),e._v(" is assumed to be the same across all validators and therefore should be included as a consensus parameter.")]),e._v(" "),o("p",[e._v("The consensus will be updated to include this "),o("code",[e._v("Timestamp")]),e._v(" field as follows:")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"dHlwZSBDb25zZW5zdXNQYXJhbXMgc3RydWN0IHsKCUJsb2NrICAgICBCbG9ja1BhcmFtcyAgICAgYGpzb246JnF1b3Q7YmxvY2smcXVvdDtgCglFdmlkZW5jZSAgRXZpZGVuY2VQYXJhbXMgIGBqc29uOiZxdW90O2V2aWRlbmNlJnF1b3Q7YAoJVmFsaWRhdG9yIFZhbGlkYXRvclBhcmFtcyBganNvbjomcXVvdDt2YWxpZGF0b3ImcXVvdDtgCglWZXJzaW9uICAgVmVyc2lvblBhcmFtcyAgIGBqc29uOiZxdW90O3ZlcnNpb24mcXVvdDtgCisrCVRpbWVzdGFtcCBUaW1lc3RhbXBQYXJhbXMgYGpzb246JnF1b3Q7dGltZXN0YW1wJnF1b3Q7YAp9Cg=="}}),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBUaW1lc3RhbXBQYXJhbXMgc3RydWN0IHsKCUFjY3VyYWN5ICB0aW1lLkR1cmF0aW9uIGBqc29uOiZxdW90O2FjY3VyYWN5JnF1b3Q7YAoJUHJlY2lzaW9uIHRpbWUuRHVyYXRpb24gYGpzb246JnF1b3Q7cHJlY2lzaW9uJnF1b3Q7YAoJTXNnRGVsYXkgIHRpbWUuRHVyYXRpb24gYGpzb246JnF1b3Q7bXNnX2RlbGF5JnF1b3Q7YAp9Cg=="}}),e._v(" "),o("h3",{attrs:{id:"changes-to-header"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-header"}},[e._v("#")]),e._v(" Changes to "),o("code",[e._v("Header")])]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/a419f4df76fe4aed668a6c74696deabb9fe73211/types/block.go#L338",target:"_blank",rel:"noopener noreferrer"}},[e._v("Header"),o("OutboundLink")],1),e._v(" struct currently contains a timestamp.\nThis timestamp is set as the "),o("code",[e._v("BFTtime")]),e._v(" derived from the block's "),o("code",[e._v("LastCommit.CommitSig")]),e._v(" timestamps.\nThis timestamp will no longer be derived from the "),o("code",[e._v("LastCommit.CommitSig")]),e._v(" timestamps and will instead be included directly into the block's "),o("code",[e._v("LastCommit")]),e._v(".\nThis timestamp will therfore be identical in both the "),o("code",[e._v("Header")]),e._v(" and the "),o("code",[e._v("LastCommit")]),e._v(".\nTo clarify that the timestamp in the header corresponds to the "),o("code",[e._v("LastCommit")]),e._v("'s time, we will rename this timestamp field to "),o("code",[e._v("last_timestamp")]),e._v(".")]),e._v(" "),o("p",[o("code",[e._v("Header")]),e._v(" will be updated as follows:")]),e._v(" "),o("tm-code-block",{staticClass:"codeblock",attrs:{language:"diff",base64:"dHlwZSBIZWFkZXIgc3RydWN0IHsKCS8vIGJhc2ljIGJsb2NrIGluZm8KCVZlcnNpb24gICAgICAgdmVyc2lvbi5Db25zZW5zdXMgYGpzb246JnF1b3Q7dmVyc2lvbiZxdW90O2AKCUNoYWluSUQgICAgICAgc3RyaW5nICAgICAgICAgICAgYGpzb246JnF1b3Q7Y2hhaW5faWQmcXVvdDtgCglIZWlnaHQgICAgICAgIGludDY0ICAgICAgICAgICAgIGBqc29uOiZxdW90O2hlaWdodCZxdW90O2AKLS0JVGltZSAgICAgICAgICB0aW1lLlRpbWUgICAgICAgICBganNvbjomcXVvdDt0aW1lJnF1b3Q7YAorKwlMYXN0VGltZXN0YW1wIHRpbWUuVGltZSAgICAgICAgIGBqc29uOiZxdW90O2xhc3RfdGltZXN0YW1wJnF1b3Q7YAoKCS8vIHByZXYgYmxvY2sgaW5mbwoJTGFzdEJsb2NrSUQgQmxvY2tJRCBganNvbjomcXVvdDtsYXN0X2Jsb2NrX2lkJnF1b3Q7YAoKCS8vIGhhc2hlcyBvZiBibG9jayBkYXRhCglMYXN0Q29tbWl0SGFzaCB0bWJ5dGVzLkhleEJ5dGVzIGBqc29uOiZxdW90O2xhc3RfY29tbWl0X2hhc2gmcXVvdDtgCglEYXRhSGFzaCAgICAgICB0bWJ5dGVzLkhleEJ5dGVzIGBqc29uOiZxdW90O2RhdGFfaGFzaCZxdW90O2AKCgkvLyBoYXNoZXMgZnJvbSB0aGUgYXBwIG91dHB1dCBmcm9tIHRoZSBwcmV2IGJsb2NrCglWYWxpZGF0b3JzSGFzaCAgICAgdG1ieXRlcy5IZXhCeXRlcyBganNvbjomcXVvdDt2YWxpZGF0b3JzX2hhc2gmcXVvdDtgCglOZXh0VmFsaWRhdG9yc0hhc2ggdG1ieXRlcy5IZXhCeXRlcyBganNvbjomcXVvdDtuZXh0X3ZhbGlkYXRvcnNfaGFzaCZxdW90O2AKCUNvbnNlbnN1c0hhc2ggICAgICB0bWJ5dGVzLkhleEJ5dGVzIGBqc29uOiZxdW90O2NvbnNlbnN1c19oYXNoJnF1b3Q7YAoJQXBwSGFzaCAgICAgICAgICAgIHRtYnl0ZXMuSGV4Qnl0ZXMgYGpzb246JnF1b3Q7YXBwX2hhc2gmcXVvdDtgCgoJLy8gcm9vdCBoYXNoIG9mIGFsbCByZXN1bHRzIGZyb20gdGhlIHR4cyBmcm9tIHRoZSBwcmV2aW91cyBibG9jawoJTGFzdFJlc3VsdHNIYXNoIHRtYnl0ZXMuSGV4Qnl0ZXMgYGpzb246JnF1b3Q7bGFzdF9yZXN1bHRzX2hhc2gmcXVvdDtgCgoJLy8gY29uc2Vuc3VzIGluZm8KCUV2aWRlbmNlSGFzaCAgICB0bWJ5dGVzLkhleEJ5dGVzIGBqc29uOiZxdW90O2V2aWRlbmNlX2hhc2gmcXVvdDtgCglQcm9wb3NlckFkZHJlc3MgQWRkcmVzcyAgICAgICAgICBganNvbjomcXVvdDtwcm9wb3Nlcl9hZGRyZXNzJnF1b3Q7YAp9Cg=="}}),e._v(" "),o("h3",{attrs:{id:"changes-to-the-block-proposal-step"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-block-proposal-step"}},[e._v("#")]),e._v(" Changes to the block proposal step")]),e._v(" "),o("h4",{attrs:{id:"proposer-selects-proposal-timestamp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proposer-selects-proposal-timestamp"}},[e._v("#")]),e._v(" Proposer selects proposal timestamp")]),e._v(" "),o("p",[e._v("The proposal logic already "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/2abfe20114ee3bb3adfee817589033529a804e4d/types/proposal.go#L44",target:"_blank",rel:"noopener noreferrer"}},[e._v("sets the Unix time known to the validator"),o("OutboundLink")],1),e._v(" into the "),o("code",[e._v("Proposal")]),e._v(" message.\nThis satisfies the proposer-based timestamp specification and does not need to change.")]),e._v(" "),o("h4",{attrs:{id:"proposer-selects-block-timestamp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proposer-selects-block-timestamp"}},[e._v("#")]),e._v(" Proposer selects block timestamp")]),e._v(" "),o("p",[e._v("The proposal timestamp that was decided in height "),o("code",[e._v("H-1")]),e._v(" will be stored in the "),o("code",[e._v("State")]),e._v(" struct's in the "),o("code",[e._v("RoundState.LastCommit")]),e._v(" field.\nThe proposer will select this timestamp to use as the block timestamp at height "),o("code",[e._v("H")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"proposer-waits"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proposer-waits"}},[e._v("#")]),e._v(" Proposer waits")]),e._v(" "),o("p",[e._v("Block timestamps must be monotonically increasing.\nIn "),o("code",[e._v("BFTTime")]),e._v(", if a validator’s clock was behind, the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/internal/consensus/state.go#L2246",target:"_blank",rel:"noopener noreferrer"}},[e._v("validator added 1 millisecond to the previous block’s time and used that in its vote messages"),o("OutboundLink")],1),e._v(".\nA goal of adding proposer-based timestamps is to enforce some degree of clock synchronization, so having a mechanism that completely ignores the Unix time of the validator time no longer works.")]),e._v(" "),o("p",[e._v("Validator clocks will not be perfectly in sync.\nTherefore, the proposer’s current known Unix time may be less than the "),o("code",[e._v("LastCommit.Timestamp")]),e._v(".\nIf the proposer’s current known Unix time is less than the "),o("code",[e._v("LastCommit.Timestamp")]),e._v(", the proposer will sleep until its known Unix time exceeds "),o("code",[e._v("LastCommit.Timestamp")]),e._v(".")]),e._v(" "),o("p",[e._v("This change will require amending the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/822893615564cb20b002dd5cf3b42b8d364cb7d9/internal/consensus/state.go#L1180",target:"_blank",rel:"noopener noreferrer"}},[e._v("defaultDecideProposal"),o("OutboundLink")],1),e._v(" method.\nThis method should now block until the proposer’s time is greater than "),o("code",[e._v("LastCommit.Timestamp")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"changes-to-the-propose-step-timeout"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-propose-step-timeout"}},[e._v("#")]),e._v(" Changes to the propose step timeout")]),e._v(" "),o("p",[e._v("Currently, a validator waiting for a proposal will proceed past the propose step if the configured propose timeout is reached and no proposal is seen.\nProposer-based timestamps requires changing this timeout logic.")]),e._v(" "),o("p",[e._v("The proposer will now wait until its current known Unix time exceeds the "),o("code",[e._v("LastCommit.Timestamp")]),e._v(" to propose a block.\nThe validators must now take this and some other factors into account when deciding when to timeout the propose step.\nSpecifically, the propose step timeout must also take into account potential inaccuracy in the validator’s clock and in the clock of the proposer.\nAdditionally, there may be a delay communicating the proposal message from the proposer to the other validators.")]),e._v(" "),o("p",[e._v("Therefore, validators waiting for a proposal must wait until after the "),o("code",[e._v("LastCommit.Timestamp")]),e._v(" before timing out.\nTo account for possible inaccuracy in its own clock, inaccuracy in the proposer’s clock, and message delay, validators waiting for a proposal will wait until "),o("code",[e._v("LastCommit.Timesatmp + 2*ACCURACY + MSGDELAY")]),e._v(".\nThe spec defines this as "),o("code",[e._v("waitingTime")]),e._v(".")]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/822893615564cb20b002dd5cf3b42b8d364cb7d9/internal/consensus/state.go#L1108",target:"_blank",rel:"noopener noreferrer"}},[e._v("propose step’s timeout is set in enterPropose"),o("OutboundLink")],1),e._v(" in "),o("code",[e._v("state.go")]),e._v(".\n"),o("code",[e._v("enterPropose")]),e._v(" will be changed to calculate waiting time using the new consensus parameters.\nThe timeout in "),o("code",[e._v("enterPropose")]),e._v(" will then be set as the maximum of "),o("code",[e._v("waitingTime")]),e._v(" and the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/dc7c212c41a360bfe6eb38a6dd8c709bbc39aae7/config/config.go#L1013",target:"_blank",rel:"noopener noreferrer"}},[e._v("configured proposal step timeout"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"changes-to-validation-rules"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-validation-rules"}},[e._v("#")]),e._v(" Changes to validation rules")]),e._v(" "),o("p",[e._v("The rules for validating that a proposal is valid will need slight modification to implement proposer-based timestamps.\nSpecifically, we will change the validation logic to ensure that the proposal timestamp is "),o("code",[e._v("timely")]),e._v(" and we will modify the way the block timestamp is validated as well.")]),e._v(" "),o("h4",{attrs:{id:"proposal-timestamp-validation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proposal-timestamp-validation"}},[e._v("#")]),e._v(" Proposal timestamp validation")]),e._v(" "),o("p",[e._v("Adding proposal timestamp validation is a reasonably straightforward change.\nThe current Unix time known to the proposer is already included in the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/dc7c212c41a360bfe6eb38a6dd8c709bbc39aae7/types/proposal.go#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("Proposal message"),o("OutboundLink")],1),e._v(".\nOnce the proposal is received, the complete message is stored in the "),o("code",[e._v("RoundState.Proposal")]),e._v(" field.\nThe precommit and prevote validation logic does not currently use this timestamp.\nThis validation logic will be updated to check that the proposal timestamp is within "),o("code",[e._v("PRECISION")]),e._v(" of the current Unix time known to the validators.\nIf the timestamp is not within "),o("code",[e._v("PRECISION")]),e._v(" of the current Unix time known to the validator, the proposal will not be considered it valid.\nThe validator will also check that the proposal time is greater than the block timestamp from the previous height.")]),e._v(" "),o("p",[e._v("If no valid proposal is received by the proposal timeout, the validator will prevote nil.\nThis is identical to the current logic.")]),e._v(" "),o("h4",{attrs:{id:"block-timestamp-validation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#block-timestamp-validation"}},[e._v("#")]),e._v(" Block timestamp validation")]),e._v(" "),o("p",[e._v("The "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/c3ae6f5b58e07b29c62bfdc5715b6bf8ae5ee951/state/validation.go#L14",target:"_blank",rel:"noopener noreferrer"}},[e._v("validBlock function"),o("OutboundLink")],1),e._v(" currently "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/c3ae6f5b58e07b29c62bfdc5715b6bf8ae5ee951/state/validation.go#L118",target:"_blank",rel:"noopener noreferrer"}},[e._v("validates the proposed block timestamp in three ways"),o("OutboundLink")],1),e._v(".\nFirst, the validation logic checks that this timestamp is greater than the previous block’s timestamp.\nAdditionally, it validates that the block timestamp is correctly calculated as the weighted median of the timestamps in the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/types/block.go#L48",target:"_blank",rel:"noopener noreferrer"}},[e._v("block’s LastCommit"),o("OutboundLink")],1),e._v(".\nFinally, the logic also authenticates the timestamps in the "),o("code",[e._v("LastCommit")]),e._v(".\nThe cryptographic signature in each "),o("code",[e._v("CommitSig")]),e._v(" is created by signing a hash of fields in the block with the validator’s private key.\nOne of the items in this "),o("code",[e._v("signedBytes")]),e._v(" hash is derived from the timestamp in the "),o("code",[e._v("CommitSig")]),e._v(".\nTo authenticate the "),o("code",[e._v("CommitSig")]),e._v(" timestamp, the validator builds a hash of fields that includes the timestamp and checks this hash against the provided signature.\nThis takes place in the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/types/validation.go#L25",target:"_blank",rel:"noopener noreferrer"}},[e._v("VerifyCommit function"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("The logic to validate that the block timestamp is greater than the previous block’s timestamp also works for proposer-based timestamps and will not change.")]),e._v(" "),o("p",[o("code",[e._v("BFTTime")]),e._v(" validation is no longer applicable and will be removed.\nValidators will no longer check that the block timestamp is a weighted median of "),o("code",[e._v("LastCommit")]),e._v(" timestamps.\nThis will mean removing the call to "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/4db71da68e82d5cb732b235eeb2fd69d62114b45/state/validation.go#L117",target:"_blank",rel:"noopener noreferrer"}},[e._v("MedianTime in the validateBlock function"),o("OutboundLink")],1),e._v(".\nThe "),o("code",[e._v("MedianTime")]),e._v(" function can be completely removed.\nThe "),o("code",[e._v("LastCommit")]),e._v(" timestamps may also be removed.")]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("signedBytes")]),e._v(" validation logic in "),o("code",[e._v("VerifyCommit")]),e._v(" will be slightly altered.\nThe "),o("code",[e._v("CommitSig")]),e._v("s in the block’s "),o("code",[e._v("LastCommit")]),e._v(" will no longer each contain a timestamp.\nThe validation logic will instead include the "),o("code",[e._v("LastCommit.Timestamp")]),e._v(" in the hash of fields for generating the "),o("code",[e._v("signedBytes")]),e._v(".\nThe cryptographic signatures included in the "),o("code",[e._v("CommitSig")]),e._v("s will then be checked against this "),o("code",[e._v("signedBytes")]),e._v(" hash to authenticate the timestamp.\nSpecifically, the "),o("code",[e._v("VerifyCommit")]),e._v(" function will be updated to use this new timestamp.")]),e._v(" "),o("h3",{attrs:{id:"changes-to-the-prevote-step"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-prevote-step"}},[e._v("#")]),e._v(" Changes to the prevote step")]),e._v(" "),o("p",[e._v("Currently, a validator will prevote a proposal in one of three cases:")]),e._v(" "),o("ul",[o("li",[e._v("Case 1:  Validator has no locked block and receives a valid proposal.")]),e._v(" "),o("li",[e._v("Case 2:  Validator has a locked block and receives a valid proposal matching its locked block.")]),e._v(" "),o("li",[e._v("Case 3:  Validator has a locked block, sees a valid proposal not matching its locked block but sees +⅔ prevotes for the new proposal’s block.")])]),e._v(" "),o("p",[e._v("The only change we will make to the prevote step is to what a validator considers a valid proposal as detailed above.")]),e._v(" "),o("h3",{attrs:{id:"changes-to-the-precommit-step"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-the-precommit-step"}},[e._v("#")]),e._v(" Changes to the precommit step")]),e._v(" "),o("p",[e._v("The precommit step will not require much modification.\nIts proposal validation rules will change in the same ways that validation will change in the prevote step.")]),e._v(" "),o("h3",{attrs:{id:"changes-to-locking-a-block"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#changes-to-locking-a-block"}},[e._v("#")]),e._v(" Changes to locking a block")]),e._v(" "),o("p",[e._v("When a validator receives a valid proposed block and +2/3 prevotes for that block, it stores the block as its ‘locked block’ in the "),o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/e8013281281985e3ada7819f42502b09623d24a0/internal/consensus/types/round_state.go#L85",target:"_blank",rel:"noopener noreferrer"}},[e._v("RoundState.ValidBlock"),o("OutboundLink")],1),e._v(" field.\nIn each subsequent round it will prevote that block.\nA validator will only change which block it has locked if it sees +2/3 prevotes for a different block.")]),e._v(" "),o("p",[e._v("This mechanism will remain largely unchanged.\nThe only difference is the addition of proposal timestamp validation.\nA validator will prevote nil in a round if the proposal message it received is not "),o("code",[e._v("timely")]),e._v(".\nPrevoting nil in this case will not cause a validator to ‘unlock’ its locked block.\nThis difference is an incidental result of the changes to prevote validation.\nIt is included in this design for completeness and to clarify that no additional changes will be made to block locking.")]),e._v(" "),o("h3",{attrs:{id:"remove-votetime-completely"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#remove-votetime-completely"}},[e._v("#")]),e._v(" Remove voteTime Completely")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/822893615564cb20b002dd5cf3b42b8d364cb7d9/internal/consensus/state.go#L2229",target:"_blank",rel:"noopener noreferrer"}},[e._v("voteTime"),o("OutboundLink")],1),e._v(" is a mechanism for calculating the next "),o("code",[e._v("BFTTime")]),e._v(" given both the validator's current known Unix time and the previous block timestamp.\nIf the previous block timestamp is greater than the validator's current known Unix time, then voteTime returns a value one millisecond greater than the previous block timestamp.\nThis logic is used in multiple places and is no longer needed for proposer-based timestamps.\nIt should therefore be removed completely.")]),e._v(" "),o("h2",{attrs:{id:"future-improvements"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#future-improvements"}},[e._v("#")]),e._v(" Future Improvements")]),e._v(" "),o("ul",[o("li",[e._v("Implement BLS signature aggregation.\nBy removing fields from the "),o("code",[e._v("Precommit")]),e._v(" messages, we are able to aggregate signatures.")])]),e._v(" "),o("h2",{attrs:{id:"consequences"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}},[e._v("#")]),e._v(" Consequences")]),e._v(" "),o("h3",{attrs:{id:"positive"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#positive"}},[e._v("#")]),e._v(" Positive")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("<2/3")]),e._v(" of validators can no longer influence block timestamps.")]),e._v(" "),o("li",[e._v("Block timestamp will have stronger correspondence to real time.")]),e._v(" "),o("li",[e._v("Improves the reliability of light client block verification.")]),e._v(" "),o("li",[e._v("Enables BLS signature aggregation.")]),e._v(" "),o("li",[e._v("Enables evidence handling to use time instead of height for evidence validity.")])]),e._v(" "),o("h3",{attrs:{id:"neutral"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}},[e._v("#")]),e._v(" Neutral")]),e._v(" "),o("ul",[o("li",[e._v("Alters Tendermint’s liveness properties.\nLiveness now requires that all correct validators have synchronized clocks within a bound.\nLiveness will now also require that validators’ clocks move forward, which was not required under "),o("code",[e._v("BFTTime")]),e._v(".")])]),e._v(" "),o("h3",{attrs:{id:"negative"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#negative"}},[e._v("#")]),e._v(" Negative")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("May increase the length of the propose step if there is a large skew between the previous proposer and the current proposer’s local Unix time.\nThis skew will be bound by the "),o("code",[e._v("PRECISION")]),e._v(" value, so it is unlikely to be too large.")])]),e._v(" "),o("li",[o("p",[e._v("Current chains with block timestamps far in the future will either need to pause consensus until after the erroneous block timestamp or must maintain synchronized but very inaccurate clocks.")])])]),e._v(" "),o("h2",{attrs:{id:"references"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://github.com/tendermint/spec/tree/master/spec/consensus/proposer-based-timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("PBTS Spec"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/tendermint/spec/blob/master/spec/consensus/bft-time.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("BFTTime spec"),o("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=s.exports}}]);